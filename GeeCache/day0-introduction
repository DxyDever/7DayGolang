1 谈谈分布式缓存
第一次请求将一些耗时操作的结果暂存，之后相同的请求，直接去缓存中取

典型例子有
- 网页JS,CSS静态文件，可以缓存在浏览器本地或者CDN服务器
- 微博点赞数据，每次点赞一次，都是在缓存中对数据进行操作的

缓存最常见的方式就是map，key-value的形式

但是会有一些常见的问题比如
- 内存不够了怎么办呢？
需要删除数据，但是删除数据的策略呢？

- 并发写发生了冲突怎么办呢？
所以需要对临界区，也就是共享资源进行加锁保护

- 单机性能不够怎么呢？
单台计算机的资源是有限的，计算、存储等都是有限的。随着业务量和访问量的增加，
单台机器很容易遇到瓶颈。如果利用多台计算机的资源，并行处理提高性能就要缓存应
用能够支持分布式，这称为水平扩展(scale horizontally)。与水平扩展相对应的
是垂直扩展(scale vertically)，即通过增加单个节点的计算、存储、带宽等，来
提高系统的性能，硬件的成本和性能并非呈线性关系，大部分情况下，分布式系统是一
个更优的选择


2 关于GeeCache

设计一个分布式缓存系统，需要考虑资源控制、淘汰策略、并发、分布式节点通信等各个
方面的问题。而且，针对不同的应用场景，还需要在不同的特性之间权衡，例如，是否需
要支持缓存更新？还是假定缓存在淘汰之前是不允许改变的。不同的权衡对应着不同的实现

groupcache 是 Go 语言版的 memcached，目的是在某些特定场合替代 memcached。
groupcache 的作者也是 memcached 的作者。无论是了解单机缓存还是分布式缓存，
深入学习这个库的实现都是非常有意义的。

GeeCache 基本上模仿了 groupcache 的实现，为了将代码量限制在 500 行左右
（groupcache 约 3000 行），裁剪了部分功能。但总体实现上，还是与 groupcache
非常接近的。支持特性有：

- 单机缓存和基于HTTP技术的分布式缓存
- LRU内存淘汰策略
- Go锁机制防止缓存击穿
- 一致性哈希选择节点，实现负载均衡
- 使用protobuf优化节点之间的二进制通信


学习点
- https://github.com/golang/groupcache
- 分布式基础算法
    - MapReduce
    - Raft
- go protobuf教程：https://geektutu.com/post/quick-go-protobuf.html
